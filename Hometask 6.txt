import Foundation

struct Cat {                                                        // (1.1, 2.1)
  var name: String = "" { 
    didSet {                                                          // (6.1)
      meow()
    }
  }
  var catSize = Size()

  func meow () {
    print("МЯЯУ")
  }

  func nameOfCat () -> String {                                    // (4.1)
    return name
  }
}

class Dog {                                                        // (1.2, 2.2 )
  var name: String = "" { 
    didSet {                                                         // (6.2)
      print("ГАВ")
    }
  }
  var weight: Double = 0.0
  var height: Double = 0.0
  
  init(name: String) {
      self.name = name 
  }

  func nameOfDog () -> String {                                    // (4.2)
    return name
  }
}

struct Size {                                                      // (3)
  var weight: Double = 0
  var height: Double = 0
}

var firstCat = Cat(name: "Мурзик")

var firstDog = Dog(name: "Барбос")

print("Имя кота - \(firstCat.nameOfCat())")

print("Имя собаки - \(firstDog.nameOfDog())")

firstCat.name = "dolboeb" // вызов didSet МЯУ после сета имени

firstDog.name = "Тузик" // вызов didSet ГАВ

var myCat = Cat(name: "Lakomka") 

myCat.catSize = Size(weight: 20.5,height: 11.1) // проверка. сработала ли структура Size

print("Параметры Лакомки: \(myCat)")

print("Лакомка весит \(myCat.catSize.weight) кг")

/* 
5) основная разница - тип. структура это явное значение, которое копируется, а класс - ссылка. классы наследуются, структуры нет. у структуы встроенный инициализатор, классу init нужно прописывать явно.
7) как я понял - какие то свойства или методы вызываются для объекта (экземпляра) класса (как в нашем случае свойство .name для экземпляра firstDog), а какие то могут вызыватсья непосредственно для самого класса, но тогда для этого при объявлении свойства в классе нужно указать static перед его объявлением, а для метода - static или class func
8) в данном случае непонятно, но по идее если проект большой то появляется необходимость разграничения доступа к тем или иным ресурсам. то есть чтобы какой то метод был доступен в другом классе, или же наоборот явно доступ был к нему ограничен исключительно родительским классом. есть 5 уровней:
internal - стандартный, полный доступ внутри модуля
public - открывает доступ из других модулей (но не дает наследоваться от класса в другом модуле)
fileprivare - доступен только для этого же файла
private - прячет все внутри класса (структуры)
open - открывает доступ из других модулей (но работает только для классов)

9) потому что структура это явно заданное значение, а класс - ссылка. типа когда экземпляр класса отъебывает его нужно деинитнуть, а структура изначально value type и занимает память.
10) посылает нахуй, типа циркулярная ссылка или рекурсия какая то
нужен созвон я считаю, тут без сто грамм не разберешься
*/

